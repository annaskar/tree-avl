#include "AVL_tree.h"
#include<cstring>
#include<string>
#include"foo.h"
#include"tree.h"

AVL_tree::AVL_tree()//ΚΕΝΟΣ ΚΑΤΑΣΤΕΥΑΣΤΗΣ
{
    rootAVL=NULL;//ΔΕΙΚΤΗΣ ΚΟΜΒΟΥ TOY AVL ΝΑ ΔΕΙΧΝΕΙ ΣΤΟ ΝULL

}

int AVL_tree::height(foo*N) //ΣΥΝΑΡΤΗΣΗ ΠΟΥ  ΥΠΟΛΟΓΙΖΕΙ ΚΑΘΕ ΦΙΡΑ ΤΟ ΥΨΟΣΤΟΥ ΔΕΝΤΡΟΥ ΓΙΑ ΚΑΘΕ ΚΟΜΒΟ
{
    if (N == NULL) //ΑΝ Ο ΔΕΙΚΤΗΣ ΚΟΜΒΟΥ ΔΕΙΧΝΕΙ ΣΕ NULL
        return 0; //ΕΠΙΣΤΡΕΦΕΙ 0
    return N->height; //ΑΛΛΙΩΣ ΕΠΙΣΤΡΕΦΕΙ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΙΚΤΗ
}

foo*AVL_tree::rightRotate(foo*y) //ΔΕΞΙΑ ΠΕΡΙΣΤΡΟΦΗ
{
    foo* x=y->left; //ΔΗΜΙΟΥΡΓΙΑ ΝΕΟΥ ΚΟΜΒΟ ΣΤΗΝ ΟΠΟΙΑ ΒΑΖΩ ΤΟ ΑΡΙΣΤΕΡΟ ΥΠΟΔΕΝΤΡΟ ΤΟΥ ΟΡΙΣΜΑΤΟΣ

    foo*ri=x->right; //ΔΗΜΙΟΥΡΓΙΑ ΝΕΟΥ ΚΟΜΒΟ ΣΤΗΝ ΟΠΟΙΑ ΒΑΖΩ ΤΟ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΚΟΜΒΟΥ ΤΟΥ ΟΡΙΣΜΑΤΟΣ

    x->right=y; //ΣΤΟ ΔΕΞΙ ΔΕΙΚΤΗ ΤΟΥ ΚΟΜΒΟΥ ,ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΔΕΙΚΤΗ ΚΟΜΒΟΥ ΤΟΥ ΟΡΙΜΣΜΑΤΟΣ, ΒΑΖΩ ΤΟ ΤΟΝ ΔΕΙΚΤΗ ΚΟΜΒΟΥ ΤΟΥ ΟΡΙΣΜΑΤΟΣ

    y->left=ri;//ΣΤΟ ΑΡΙΣΕΡΟ ΔΕΙΚΤΗ ΚΟΜΒΟΥ ,ΤΟΥ ΔΕΞΙ ΔΕΙΚΤΗ ΚΟΜΒΟΥ ΤΟΥ ΟΡΙΣΜΑΤΟΣ,ΒΑΖΩ ΤΟ ΑΡΙΣΤΕΡΟ ΥΠΟΔΕΝΤΡΟ ΤΟΥ ΔΕΙΚΤΗ ΚΟΜΒΟΥ ΤΟΥ ΟΡΙΣΜΑΤΟΣ

    if(height(y->left)>height(y->right)) //ΑΝ ΤΟ ΥΨΟΣ ΤΟΥ ΑΡΙΑΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ ΕΙΝΑΙ ΜΕΓΑΛΥΤΕΡΟ ΑΠΟ ΤΟ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟΥ

        x->height=height(y->left)+1; //ΕΚΧΩΡΩ ΤΟ ΤΟ ΜΕΓΑΛΥΤΕΡΟ ΥΨΟΣ(ΔΗΛΑΔΗ ΤΟ ΥΨΟΣ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ )

    else

        y->height=height(y->right)+1;//ΑΛΛΙΩΣ ΕΚΧΩΡΩ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟΥ

    if(height(x->left)>height(x->right)) //ΑΝ ΤΟ ΥΨΟΣ ΤΟΥ ΑΡΙΑΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ ΕΙΝΑΙ ΜΕΓΑΛΥΤΕΡΟ ΑΠΟ ΤΟ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟΥ

        x->height=height(x->left); //ΕΚΧΩΡΩ ΤΟ ΤΟ ΜΕΓΑΛΥΤΕΡΟ ΥΨΟΣ(ΔΗΛΑΔΗ ΤΟ ΥΨΟΣ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ )

    else

        x->height=height(x->right);//ΑΛΛΙΩΣ ΕΚΧΩΡΩ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟΥ

    return x;//ΕΠΙΣΤΡΕΦΩ ΤΟΝ ΔΕΙΚΤΗ ΤΟΥ ΚΟΜΒΟΥ ΤΟΥ Χ

}


 foo*AVL_tree::leftRotate(foo*x) //ΑΡΙΣΤΕΡΗ ΠΕΡΙΣΤΡΟΦΗ
 {
    foo *y=x->right; //ΔΗΜΙΟΥΡΓΙΑ ΝΕΟΥ ΚΟΜΒΟΥ ΣΤΟ ΟΠΟΙΟ ΒΑΖΩ ΤΟ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟ

    foo *le=y->left; //ΔΗΜΙΟΥΡΓΙΑ ΝΕΟΥ ΚΟΜΒΟΥ ΣΤΟ ΟΠΟΙΟ ΒΑΖΩ ΤΟ ΑΡΙΣΤΕΡΟ ΥΠΟΔΕΝΤΡΟ

    x->right=le; // ΣΤΟ ΔΕΞΙ ΔΕΙΚΤΗ ΚΟΜΒΟΥ ΤΟΥ ΥΠΟΔΕΝΤΡΟΥ ΤΟΥ ΟΡΙΣΜΟΑΤΟΣ,ΒΑΖΩ ΤΟΝ ΑΡΙΣΤΕΡΟ ΔΕΚΤΗ ΚΟΜΒΟΥ ΤΟΥ ΟΡΙΣΜΑΤΟΣ

    y->left=x;//ΣΤΟ ΑΡΙΣΤΕΡΟ  ΔΕΙΚΤΗ ΚΟΜΒΟΥ ΤΟΥ ΥΠΟΔΕΝΤΡΟΥ ,ΒΑΖΩ ΤΟ  ΔΕΞΙ ΔΕΙΚΤΗ ΚΟΜΒΟΥ ΤΟΥ ΟΡΙΣΜΑΤΟΣ

   if(height(x->left)>height(x->right)) //ΑΝ ΤΟ ΥΨΟΣ ΤΟΥ ΑΡΙΑΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ ΕΙΝΑΙ ΜΕΓΑΛΥΤΕΡΟ ΑΠΟ ΤΟ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟΥ

        x->height=height(x->left)+1; //ΕΚΧΩΡΩ ΤΟ ΤΟ ΜΕΓΑΛΥΤΕΡΟ ΥΨΟΣ(ΔΗΛΑΔΗ ΤΟ ΥΨΟΣ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ )

     else

        x->height=height(x->right)+1;//ΑΛΛΙΩΣ ΕΚΧΩΡΩ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟΥ

    if(height(y->left)>height(y->right)) //ΑΝ ΤΟ ΥΨΟΣ ΤΟΥ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΚΟΜΒΟΥ ΤΟΥ ΥΠΟΔΕΝΤΡΟΥ ΕΙΝΑΙ ΜΕΓΑΛΥΤΕΡΟ ΑΠΟ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙ ΥΠΟΔΕΝΤΡΟΥ

        y->height=height(y->left); //ΕΚΧΩΡΩ ΣΤΟ ΥΨΟΣ ΤΟΥ ΝΕΟΥ ΚΟΜΒΟΥ ΤΟ ΥΨΟΣ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ

    else

        y->height=height(y->right); //ΑΛΛΙΩΣ ΕΚΧΩΡΩ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙ ΚΟΜΒΟΥ ΣΤΟΝ ΝΕΟ ΚΟΜΒΟ

    return y; //ΕΠΙΣΤΡΕΦΩ ΤΟΝ ΔΕΙΚΤΗ ΚΟΜΒΟΥ

}



 foo*AVL_tree::insert_AVLTREE(char*e,foo*root) //ΣΥΝΑΡΤΗΣΗ ΕΙΣΑΓΩΓΗΣ ΛΕΞΕΩΝ ΣΤΟ AVL TREE
{
{
        if(root == NULL)//ΑΝ Ο ΔΕΙΚΤΗΣ ΚΟΜΒΟΥ ΤΟΥ ΟΡΙΣΜΑΤΟΣ ΔΕΙΧΝΕΙ ΣΕ NULL ΤΟΤΕ
        {
            root = new foo;//ΔΗΜΙΟΥΡΓΩ ΕΝΑΝ ΠΡΟΣΩΡΙΝΟ ΔΕΙΚΤΗ ΚΟΜΒΟΥ

             root->height = 0;//ΑΡΧΙΚΟΠΟΙΟ ΤΟ ΥΨΟΣ ΤΟΥ ΠΡΟΣΩΡΙΝΟΥ ΚΟΜΒΟΥ

             root->left =NULL;//ΑΡΧΙΚΟΠΟΙΣΗ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΚΟΜΒΟΥ ΣΕ NULL

             root->right = NULL;// Ο ΔΕΞΙΟΣ ΔΕΙΚΤΗΣ ΚΟΜΒΟΥ ΔΕΙΧΝΟΥΝ ΣΕ NULL

             strcpy(root->p,e); //ΑΝΤΙΓΡΑΦΗ ΤΟΥ ΟΡΙΜΣΑΤΟΣ ΣΤΟΝ ΠΙΝΑΚΑ ΤΟΥ ΝΕΟΥ ΚΟΜΒΟΥ

            root->pl+=1;//ΚΑΝΩ ΤΟ ΠΛΗΘΟΣ ΕΜΦΑΝΙΣΕΩΝ +1
        }
        else
          if(strcmp(e,root->p)<0)//ΑΝ Η ΛΕΞΗ ΤΟΥ ΟΡΙΣΜΑΤΟΣ ΕΙΝΑΙ ΜΙΚΡΟΤΕΡΗ ΤΗΣ ΣΥΜΒΟΛΟΣΕΙΡΑΣ ΤΟΥ ΚΟΜΒΟΥ ΤΟΥ
        {
            root->left = insert_AVLTREE(e, root->left); //ΚΑΛΩ ΑΝΑΔΡΟΜΙΚΑ ΤΗΝ INSERT ΚΑΙ ΣΤΑ ΑΡΙΣΤΕΡΑ ΤΟΥ ΚΟΜΒΟΥ ΒΑΖΩ ΤΗΝ ΤΙΜΗ ΤΗΣ

            if(height(root->left) - height(root->right)>1)//ΑΝ Η ΔΙΑΦΟΡΑ ΥΨΟΥΣ ΤΩΝ ΥΠΟΔΕΝΤΡΩΝ ΕΙΝΑΙ ΜΕΓΑΛΥΤΕΡΗ ΑΠΟ 1
            {
                if(strcmp(e,root->left->p)<0)//ΑΝ Η ΛΕΞΗ ΤΟΥ ΟΡΙΣΜΑΤΟΣ ΕΙΝΑΙ ΜΙΚΡΟΤΕΡΗ ΑΠΟ ΤΗΝ ΛΕΞΗ ΑΡΙΣΤΕΡΑ ΤΟΥ ΚΟΜΒΟΥ

                    root = rightRotate(root);// ΚΑΛΩ ΤΗΝ RIGHTROTATE ΚΑΙ ΑΠΟΘΗΚΕΥΩ ΤΗΝ ΤΙΜΗ ΤΗΣ ΣΤΟΝ ΚΟΜΒΟ ROOT

                else
                {
                    root->left = leftRotate(root->left); //ΚΑΛΩ ΤΗΝ LEFTROTATE ΚΑΙ ΒΑΖΩ ΤΗΝ ΤΙΜΗ ΤΗΣ ΣΤΑ ΔΕΞΙΑ ΤΟΥ ΚΟΜΒΟΥ ROOT
                    //ΓΙΝΕΤΕ ΔΗΛΑΔΗ ΜΙΑ ΑΡΙΣΤΕΡΗ ΠΕΡΙΣΤΡΟΦΗ

                    root = rightRotate(root); //ΚΑΛΩ ΤΗΝ RIGHTROTATE ΚΑΙ ΒΑΖΩ ΤΗΝ ΤΙΜΗ ΤΗΣ ΣΤΟ ROOT
                    //ΓΙΝΕΤΕ ΜΙΑ ΔΕΞΙΑ ΠΕΡΙΣΤΡΟΦΗ
                }
            }
        }
        else
            if(strcmp(e,root->p)>0)//ΑΝ Η ΛΕΞΗ ΕΙΝΑΙ ΜΕΓΑΛΥΤΕΡΗ ΑΠΟ ΤΗΝ ΛΕΞΗ ΤΟΥ ΚΟΜΒΟΥ ROOT
        {
            root->right = insert_AVLTREE(e, root->right);//ΚΑΛΩ ΑΝΑΔΡΟΜΙΚΑ ΤΗΝ INSERT ΚΑΙ ΕΚΧΩΡΩ ΤΟ ΑΠΟΤΕΛΕΣΜΑ ΤΗΣ ΔΕΞΙΑ ΤΟΥ ΚΟΜΒΟΥ

            if(height(root->right) - height(root->left) == 2)//ΑΝ Η ΔΙΑΦΟΡΑ ΥΨΟΥΣ ΤΩΝ ΥΠΟΔΕΝΤΡΩΝ ΕΙΝΑΙ 2
            {
                if(strcmp(e,root->right->p)>0)//ΑΝ Η ΛΕΞΗ ΕΙΝΑΙ ΜΕΓΑΛΥΤΕΡΗ ΑΠΟ ΤΗΝ ΛΕΞΗ ΤΟΥ ΔΕΞΙΑ ΚΟΜΒΟΥ

                    root = leftRotate(root);//ΚΑΛΩ ΤΗΝ LEFTROTETE ΚΑΙ ΕΚΧΩΡΩ ΤΟ ΑΠΟΤΕΛΕΣΜΑ ΤΗΣ ΣΤΟΝ ΚΟΜΒΟ ROOT
                else

                {
                    root->right = rightRotate(root->right);//ΑΛΛΙΩΣ ΚΑΛΛΩ ΤΗΝ RIGHT ROTATE ΚΑΙ ΕΚΧΩΡΩ ΤΟ ΑΠΟΤΕΛΕΣΜΑ ΤΗΣ ΣΤΑ ΔΕΞΙΑ ΤΟΥ ΚΟΜΒΟΥ

                    root = leftRotate(root); //ΕΚΤΕΛΩ ΤΗΝ LEFTROTETE ΚΑΙ ΕΚΧΩΡΩ ΤΟ ΑΠΟΤΕΛΕΣΜΑ ΤΗΣ ΣΤΟ ΚΟΜΒΟ ROOT
                }
            }
        }
        else
            root->pl+=1;//ΑΥΞΗΣΗ ΤΟΥ ΠΛΗΘΟΣ ΤΗΣ ΛΕΞΗΣ +1
        if(height(root->left)> height(root->right))//AN TO ΥΨΟΣ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ ΕΙΝΑΙ ΜΕΓΑΛΥΤΕΡΟ ΑΠΟ ΤΟ ΔΕΞΗ

            root->height=height(root->left) +1;//ΒΑΖΩ ΣΑΝ ΥΨΟΣ ΣΤΟΝ ΚΟΜΒΟ ΤΟ ΥΨΟΣ ΤΟΥ ΑΡΙΣΤΕΡΟΥ ΥΠΟΔΕΝΤΡΟΥ ΑΥΞΗΜΕΝΟ ΚΑΤΑ ΜΙΑ ΜΟΝΑΔΑ

        else//ΑΛΛΙΩΣ

            root->height=height(root->right) +1;//ΒΑΖΩ ΤΟ ΥΨΟΣ ΤΟΥ ΔΕΞΙΑ ΥΠΟΔΕΝΤΡΟΥ ΚΑΙ ΤΟ ΑΥΞΑΝΩ ΚΑΤΑ ΜΙΑ ΜΟΝΑΔΑ

        return root; //ΕΠΙΣΤΡΕΦΩ ΤΟN ΚΟΜΒΟ
}}



AVL_tree::~AVL_tree() //ΚΑΤΑΣΤΡΟΦΕΑΣ ΤΟΥ AVL
{
    //dtor
}
